{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "8bit-carousel",
  "type": "registry:component",
  "title": "8-bit Card",
  "description": "A simple 8-bit carousel component",
  "registryDependencies": [
    "carousel"
  ],
  "files": [
    {
      "path": "components/ui/8bit/carousel.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { Button } from \"@/components/ui/8bit/button\";\n\ntype CarouselApi = UseEmblaCarouselType[1];\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\ntype CarouselOptions = UseCarouselParameters[0];\ntype CarouselPlugin = UseCarouselParameters[1];\n\ntype CarouselProps = {\n  opts?: CarouselOptions;\n  plugins?: CarouselPlugin;\n  orientation?: \"horizontal\" | \"vertical\";\n  setApi?: (api: CarouselApi) => void;\n};\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\n  api: ReturnType<typeof useEmblaCarousel>[1];\n  scrollPrev: () => void;\n  scrollNext: () => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n} & CarouselProps;\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null);\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext);\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\");\n  }\n\n  return context;\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    );\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false);\n    const [canScrollNext, setCanScrollNext] = React.useState(false);\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return;\n      }\n\n      setCanScrollPrev(api.canScrollPrev());\n      setCanScrollNext(api.canScrollNext());\n    }, []);\n\n    const scrollPrev = React.useCallback(() => {\n      console.log(\"scrolled prev\");\n      api?.scrollPrev();\n    }, [api]);\n\n    const scrollNext = React.useCallback(() => {\n      console.log(\"scrolled next\");\n      api?.scrollNext();\n    }, [api]);\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault();\n          scrollPrev();\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault();\n          scrollNext();\n        }\n      },\n      [scrollPrev, scrollNext]\n    );\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return;\n      }\n\n      setApi(api);\n    }, [api, setApi]);\n\n    React.useEffect(() => {\n      if (!api) {\n        return;\n      }\n\n      onSelect(api);\n      api.on(\"reInit\", onSelect);\n      api.on(\"select\", onSelect);\n\n      return () => {\n        api?.off(\"select\", onSelect);\n      };\n    }, [api, onSelect]);\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    );\n  }\n);\nCarousel.displayName = \"Carousel\";\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel();\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  );\n});\nCarouselContent.displayName = \"CarouselContent\";\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel();\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  );\n});\nCarouselItem.displayName = \"CarouselItem\";\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel();\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        orientation === \"horizontal\"\n          ? \"top-1/2 -left-10 md:-left-14 -translate-y-1/2 active:-translate-y-1 w-8 h-9 md:w-9 md:h-10 \"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90 w-8 h-10 md:w-9 md:h-11\",\n        \"absolute rounded-none aspect-square grid place-items-center\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <svg\n        width=\"50\"\n        height=\"50\"\n        viewBox=\"0 0 256 256\"\n        fill=\"currentColor\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        stroke=\"currentColor\"\n        strokeWidth=\"0.25\"\n        color=\"currentColor\"\n        aria-label=\"arrow-left\"\n      >\n        <rect x=\"64\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"96\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"80\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"112\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"144\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"160\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"80\" y=\"104\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"96\" y=\"88\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"112\" y=\"72\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"80\" y=\"136\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"96\" y=\"152\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"112\" y=\"168\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"176\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"128\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n      </svg>\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  );\n});\nCarouselPrevious.displayName = \"CarouselPrevious\";\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel();\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        orientation === \"horizontal\"\n          ? \"top-1/2 -right-10 md:-right-14 -translate-y-1/2 active:-translate-y-1 aspect-square shrink-0 w-8 h-9 md:w-9 md:h-10 \"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90 w-8 h-10 md:w-9 md:h-11\",\n        \"absolute rounded-none aspect-square grid place-items-center\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <svg\n        width=\"50\"\n        height=\"50\"\n        viewBox=\"0 0 256 256\"\n        fill=\"currentColor\"\n        className=\"block\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        stroke=\"currentColor\"\n        strokeWidth=\"0.25\"\n        color=\"currentColor\"\n        aria-label=\"arrow-right\"\n      >\n        <rect x=\"64\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"96\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"80\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"112\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"144\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"160\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"160\" y=\"136\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"144\" y=\"152\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"128\" y=\"72\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"128\" y=\"168\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"176\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"160\" y=\"104\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"144\" y=\"88\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n        <rect x=\"128\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\n      </svg>\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  );\n});\nCarouselNext.displayName = \"CarouselNext\";\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n};\n",
      "type": "registry:component",
      "target": "components/ui/8bit/carousel.tsx"
    },
    {
      "path": "components/ui/8bit/styles/retro.css",
      "content": "@import url(\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\");\n\n.retro {\n  font-family:\n    \"Press Start 2P\",\n    system-ui,\n    -apple-system,\n    sans-serif;\n  line-height: 1.5;\n  letter-spacing: 0.5px;\n}\n",
      "type": "registry:component",
      "target": "components/ui/8bit/styles/retro.css"
    }
  ]
}